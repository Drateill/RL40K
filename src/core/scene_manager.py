"""
Gestionnaire de sc√®nes - Organise les diff√©rents √©crans du jeu
Permet de basculer entre menu, jeu, pause, game over, etc.
"""

class SceneManager:
    """Gestionnaire des sc√®nes du jeu"""
    
    def __init__(self):
        self.scenes = {}  # Dict des sc√®nes disponibles
        self.active_scene = None  # Sc√®ne actuellement active
        self.previous_scene = None  # Sc√®ne pr√©c√©dente pour retour
        
        # Stack pour gestion des sc√®nes empil√©es (pause par exemple)
        self.scene_stack = []
    
    def add_scene(self, name, scene):
        """Ajoute une nouvelle sc√®ne"""
        self.scenes[name] = scene
        if hasattr(scene, 'scene_manager'):
            scene.scene_manager = self  # R√©f√©rence retour
        print(f"üìù Sc√®ne '{name}' ajout√©e")
    
    def remove_scene(self, name):
        """Supprime une sc√®ne"""
        if name in self.scenes:
            del self.scenes[name]
            print(f"üóëÔ∏è Sc√®ne '{name}' supprim√©e")
    
    def set_active_scene(self, name):
        """Active une sc√®ne sp√©cifique"""
        if name not in self.scenes:
            print(f"‚ùå Erreur: Sc√®ne '{name}' non trouv√©e")
            return False
        
        # Sauvegarder la sc√®ne pr√©c√©dente
        if self.active_scene:
            self.previous_scene = self.active_scene
            if hasattr(self.active_scene, 'on_exit'):
                self.active_scene.on_exit()
        
        # Activer la nouvelle sc√®ne
        self.active_scene = self.scenes[name]
        if hasattr(self.active_scene, 'on_enter'):
            self.active_scene.on_enter()
        
        print(f"üé¨ Sc√®ne active: '{name}'")
        return True
    
    def push_scene(self, name):
        """Empile une sc√®ne (pour pause par exemple)"""
        if name not in self.scenes:
            print(f"‚ùå Erreur: Sc√®ne '{name}' non trouv√©e")
            return False
        
        # Mettre la sc√®ne actuelle en pause
        if self.active_scene:
            if hasattr(self.active_scene, 'on_pause'):
                self.active_scene.on_pause()
            self.scene_stack.append(self.active_scene)
        
        # Activer la nouvelle sc√®ne
        self.active_scene = self.scenes[name]
        if hasattr(self.active_scene, 'on_enter'):
            self.active_scene.on_enter()
        
        print(f"üìö Sc√®ne '{name}' empil√©e")
        return True
    
    def pop_scene(self):
        """D√©pile la sc√®ne courante (retour de pause)"""
        if not self.scene_stack:
            print("‚ùå Aucune sc√®ne √† d√©piler")
            return False
        
        # Quitter la sc√®ne actuelle
        if self.active_scene and hasattr(self.active_scene, 'on_exit'):
            self.active_scene.on_exit()
        
        # R√©cup√©rer la sc√®ne pr√©c√©dente
        self.active_scene = self.scene_stack.pop()
        if hasattr(self.active_scene, 'on_resume'):
            self.active_scene.on_resume()
        
        print("üìö Sc√®ne d√©pil√©e")
        return True
    
    def update(self, dt):
        """Met √† jour la sc√®ne active"""
        if self.active_scene:
            self.active_scene.update(dt)
            
            # NOTE: Transitions automatiques d√©sactiv√©es - g√©r√©es par GameEngine
            # if hasattr(self.active_scene, 'get_next_scene'):
            #     next_scene = self.active_scene.get_next_scene()
            #     if next_scene:
            #         self.handle_scene_transition(next_scene)
    
    def handle_scene_transition(self, transition_type):
        """G√®re les transitions automatiques entre sc√®nes"""
        if transition_type == "game":
            from ..scenes.game_scene import GameScene
            game_scene = GameScene()
            self.add_scene("game", game_scene)
            self.set_active_scene("game")
        elif transition_type == "settings":
            from ..ui.scenes.settings_menu import SettingsMenuScene
            settings_scene = SettingsMenuScene()
            # Passer le syst√®me audio si disponible
            if hasattr(self.active_scene, 'sound_system'):
                settings_scene.set_sound_system(self.active_scene.sound_system)
            self.add_scene("settings", settings_scene)
            self.push_scene("settings")
        elif transition_type == "back":
            self.pop_scene()
        elif transition_type == "quit":
            import pygame
            pygame.quit()
            exit()
    
    def render(self, screen):
        """Dessine la sc√®ne active"""
        if self.active_scene:
            if hasattr(self.active_scene, 'render'):
                self.active_scene.render(screen)
            elif hasattr(self.active_scene, 'draw'):
                self.active_scene.draw(screen)
    
    def go_back(self):
        """Retourne √† la sc√®ne pr√©c√©dente"""
        if self.previous_scene:
            current_name = self.get_active_scene_name()
            previous_scene = self.previous_scene
            
            # Chercher le nom de la sc√®ne pr√©c√©dente
            previous_name = None
            for name, scene in self.scenes.items():
                if scene == previous_scene:
                    previous_name = name
                    break
            
            if previous_name:
                self.set_active_scene(previous_name)
                print(f"‚¨ÖÔ∏è Retour √† '{previous_name}' depuis '{current_name}'")
                return True
        
        print("‚ùå Aucune sc√®ne pr√©c√©dente")
        return False
    
    def get_active_scene_name(self):
        """Retourne le nom de la sc√®ne active"""
        if not self.active_scene:
            return None
        
        for name, scene in self.scenes.items():
            if scene == self.active_scene:
                return name
        return "unknown"
    
    def get_scene(self, name):
        """Retourne une sc√®ne par son nom"""
        return self.scenes.get(name)
    
    def list_scenes(self):
        """Liste toutes les sc√®nes disponibles"""
        print("üìã Sc√®nes disponibles:")
        for name in self.scenes.keys():
            status = "ACTIVE" if self.scenes[name] == self.active_scene else "inactive"
            print(f"  - {name} ({status})")
    
    def clear_stack(self):
        """Vide la pile des sc√®nes"""
        self.scene_stack.clear()
        print("üóëÔ∏è Pile des sc√®nes vid√©e")