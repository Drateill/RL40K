"""
Syst√®me d'environnements proc√©duraux pour le roguelike WH40K
G√©n√®re diff√©rents types de niveaux avec leurs th√®mes et m√©caniques uniques
"""

import pygame
import random
import math
from enum import Enum
from dataclasses import dataclass
from typing import List, Tuple, Optional

class EnvironmentType(Enum):
    """Types d'environnements disponibles"""
    SHIP = "ship"              # Vaisseau spatial - Couloirs, portes
    TEMPLE = "temple"          # Temple imp√©rial - Grandes salles, colonnes  
    FORGE = "forge"            # Forge World - Machines, convoyeurs, dangers
    CHAOS = "chaos"            # Monde corrompu - G√©om√©trie impossible
    DEATH_WORLD = "death"      # Monde de la mort - Pi√®ges naturels

@dataclass
class EnvironmentConfig:
    """Configuration d'un type d'environnement"""
    name: str
    description: str
    wall_color: Tuple[int, int, int]
    floor_color: Tuple[int, int, int]
    accent_color: Tuple[int, int, int]
    
    # Probabilit√©s de g√©n√©ration
    corridor_chance: float = 0.3
    room_chance: float = 0.4
    obstacle_chance: float = 0.2
    special_chance: float = 0.1
    
    # Dimensions pr√©f√©r√©es
    min_room_size: int = 80
    max_room_size: int = 200
    corridor_width: int = 40
    
    # Effets sp√©ciaux
    has_ambient_effects: bool = False
    has_interactive_elements: bool = False
    movement_modifier: float = 1.0

class EnvironmentSystem:
    """Gestionnaire principal des environnements"""
    
    def __init__(self):
        self.current_environment = EnvironmentType.SHIP
        self.current_config = None
        self.generated_layout = None
        
        # D√©finir les configurations pour chaque environnement
        self.environment_configs = {
            EnvironmentType.SHIP: EnvironmentConfig(
                name="Vaisseau Spatial",
                description="Couloirs m√©talliques et salles techniques",
                wall_color=(80, 80, 100),      # Gris m√©tallique
                floor_color=(40, 40, 50),      # Sol sombre
                accent_color=(0, 150, 200),    # Bleu tech
                corridor_chance=0.5,           # Beaucoup de couloirs
                room_chance=0.3,
                corridor_width=50,
                movement_modifier=1.0
            ),
            
            EnvironmentType.TEMPLE: EnvironmentConfig(
                name="Temple Imp√©rial", 
                description="Architecture sacr√©e et vo√ªtes gothiques",
                wall_color=(120, 100, 80),     # Pierre dor√©e
                floor_color=(60, 50, 40),      # Marbre sombre
                accent_color=(255, 215, 0),    # Or imp√©rial
                corridor_chance=0.2,           # Moins de couloirs
                room_chance=0.6,               # Grandes salles
                min_room_size=120,
                max_room_size=300,
                movement_modifier=1.1          # Terrain sanctifi√©
            ),
            
            EnvironmentType.FORGE: EnvironmentConfig(
                name="Forge World",
                description="Complexe industriel et machineries", 
                wall_color=(100, 60, 40),      # M√©tal rouill√©
                floor_color=(80, 40, 20),      # Sol industriel
                accent_color=(255, 100, 0),    # Orange forge
                corridor_chance=0.4,
                obstacle_chance=0.4,           # Beaucoup d'obstacles
                special_chance=0.2,            # Machines sp√©ciales
                has_interactive_elements=True,
                movement_modifier=0.9          # Terrain difficile
            ),
            
            EnvironmentType.CHAOS: EnvironmentConfig(
                name="Monde Corrompu",
                description="R√©alit√© distordue par le Chaos",
                wall_color=(100, 20, 100),     # Pourpre chaotique
                floor_color=(50, 10, 50),      # Sol corrompu
                accent_color=(255, 0, 255),    # Magenta chaos
                corridor_chance=0.3,
                room_chance=0.3,
                special_chance=0.4,            # Beaucoup d'√©l√©ments √©tranges
                has_ambient_effects=True,
                movement_modifier=0.8          # Corruption ralentit
            ),
            
            EnvironmentType.DEATH_WORLD: EnvironmentConfig(
                name="Monde de la Mort", 
                description="Environnement hostile et dangereux",
                wall_color=(60, 80, 40),       # Vert naturel
                floor_color=(40, 60, 20),      # Sol organique
                accent_color=(200, 0, 0),      # Rouge danger
                corridor_chance=0.1,           # Peu de couloirs
                room_chance=0.3,
                obstacle_chance=0.5,           # Tr√®s dangereux
                special_chance=0.3,
                has_ambient_effects=True,
                movement_modifier=0.7          # Terrain tr√®s difficile
            )
        }
    
    def select_environment_for_wave(self, wave_number: int, morality_system=None) -> EnvironmentType:
        """S√©lectionne l'environnement selon la vague et la moralit√©"""
        
        # Progression bas√©e sur les vagues
        if wave_number <= 3:
            # D√©but : Vaisseau spatial (tutoriel)
            return EnvironmentType.SHIP
        
        elif wave_number <= 8:
            # Milieu d√©but : Temple ou Vaisseau
            return random.choice([EnvironmentType.SHIP, EnvironmentType.TEMPLE])
        
        elif wave_number <= 15:
            # Milieu : Tous sauf les plus dangereux
            base_envs = [EnvironmentType.SHIP, EnvironmentType.TEMPLE, EnvironmentType.FORGE]
            
            # Influence de la moralit√©
            if morality_system:
                if morality_system.corruption >= 50:
                    base_envs.append(EnvironmentType.CHAOS)
                if morality_system.faith >= 60:
                    # Les purs pr√©f√®rent les temples
                    base_envs.extend([EnvironmentType.TEMPLE] * 2)
            
            return random.choice(base_envs)
        
        else:
            # Fin de jeu : Tous les environnements possibles
            all_envs = list(EnvironmentType)
            
            # Influence forte de la moralit√©
            if morality_system:
                if morality_system.corruption >= 70:
                    # Les corrompus vont plus souvent en terrain chaos
                    return random.choice([EnvironmentType.CHAOS, EnvironmentType.DEATH_WORLD, EnvironmentType.FORGE])
                elif morality_system.faith >= 80:
                    # Les purs √©vitent les lieux corrompus
                    return random.choice([EnvironmentType.TEMPLE, EnvironmentType.SHIP])
            
            return random.choice(all_envs)
    
    def generate_environment(self, world_width: int, world_height: int, 
                           env_type: EnvironmentType = None) -> List:
        """G√©n√®re un nouvel environnement complet"""
        
        if env_type is None:
            env_type = self.current_environment
        else:
            self.current_environment = env_type
        
        self.current_config = self.environment_configs[env_type]
        
        print(f"üåç G√©n√©ration de l'environnement : {self.current_config.name}")
        print(f"   Description : {self.current_config.description}")
        
        # G√©n√©rer le layout selon le type
        if env_type == EnvironmentType.SHIP:
            return self._generate_ship_layout(world_width, world_height)
        elif env_type == EnvironmentType.TEMPLE:
            return self._generate_temple_layout(world_width, world_height)
        elif env_type == EnvironmentType.FORGE:
            return self._generate_forge_layout(world_width, world_height)
        elif env_type == EnvironmentType.CHAOS:
            return self._generate_chaos_layout(world_width, world_height)
        elif env_type == EnvironmentType.DEATH_WORLD:
            return self._generate_death_world_layout(world_width, world_height)
        else:
            # Fallback vers un layout basique
            return self._generate_basic_layout(world_width, world_height)
    
    def _generate_ship_layout(self, width: int, height: int) -> List:
        """‚úÖ VERSION CORRIG√âE - Layout de vaisseau avec corridors connect√©s"""
        from wall import Wall
        walls = []
        
        # Bordures
        border_thickness = 40
        walls.extend(self._create_borders(width, height, border_thickness))
        
        # COULOIRS PRINCIPAUX - Cr√©er un r√©seau accessible
        corridor_width = 80
        corridor_wall_thickness = 15
        
        # Couloir central horizontal (traverse tout le niveau)
        center_y = height // 2
        # Murs du couloir horizontal
        walls.append(Wall(border_thickness, center_y - corridor_width//2, 
                        width - 2*border_thickness, corridor_wall_thickness))
        walls.append(Wall(border_thickness, center_y + corridor_width//2, 
                        width - 2*border_thickness, corridor_wall_thickness))
        
        # Couloir central vertical (traverse tout le niveau)
        center_x = width // 2
        # Murs du couloir vertical
        walls.append(Wall(center_x - corridor_width//2, border_thickness,
                        corridor_wall_thickness, height - 2*border_thickness))
        walls.append(Wall(center_x + corridor_width//2, border_thickness,
                        corridor_wall_thickness, height - 2*border_thickness))
        
        # SALLES CONNECT√âES - Chaque salle a au moins 2 ouvertures vers les couloirs
        room_size = 120
        margin = border_thickness + 60
        
        # Salle coin haut-gauche - Ouvertures vers le bas et la droite
        walls.extend(self._create_room_walls(margin, margin, room_size, room_size, 20, 
                                            60, ["bottom", "right"]))
        
        # Salle coin haut-droite - Ouvertures vers le bas et la gauche
        walls.extend(self._create_room_walls(width - margin - room_size, margin, 
                                            room_size, room_size, 20, 60, ["bottom", "left"]))
        
        # Salle coin bas-gauche - Ouvertures vers le haut et la droite
        walls.extend(self._create_room_walls(margin, height - margin - room_size,
                                            room_size, room_size, 20, 60, ["top", "right"]))
        
        # Salle coin bas-droite - Ouvertures vers le haut et la gauche
        walls.extend(self._create_room_walls(width - margin - room_size, 
                                            height - margin - room_size,
                                            room_size, room_size, 20, 60, ["top", "left"]))
        
        # Obstacles techniques dispers√©s (mais PAS dans les couloirs)
        safe_zones = [
            (center_x - corridor_width//2, center_y - corridor_width//2, corridor_width, corridor_width),
            (border_thickness, center_y - corridor_width//2, width - 2*border_thickness, corridor_width),
            (center_x - corridor_width//2, border_thickness, corridor_width, height - 2*border_thickness)
        ]
        
        for _ in range(6):  # R√©duire le nombre d'obstacles
            for attempt in range(20):  # Essais pour placement s√ªr
                obs_x = random.randint(border_thickness + 50, width - border_thickness - 100)
                obs_y = random.randint(border_thickness + 50, height - border_thickness - 100)
                obs_size = random.randint(25, 45)
                
                # V√©rifier qu'on ne bloque pas les couloirs
                obs_rect = pygame.Rect(obs_x, obs_y, obs_size, obs_size)
                safe = True
                
                for safe_x, safe_y, safe_w, safe_h in safe_zones:
                    safe_rect = pygame.Rect(safe_x, safe_y, safe_w, safe_h)
                    if obs_rect.colliderect(safe_rect):
                        safe = False
                        break
                
                if safe:
                    walls.append(Wall(obs_x, obs_y, obs_size, obs_size))
                    break
        
        return walls

    def _generate_temple_layout(self, width: int, height: int) -> List:
        """‚úÖ VERSION CORRIG√âE - Temple avec acc√®s complet"""
        from wall import Wall
        walls = []
        
        # Bordures
        border_thickness = 50
        walls.extend(self._create_borders(width, height, border_thickness))
        
        # Grande salle centrale avec QUATRE ouvertures
        center_room_width = 300
        center_room_height = 200
        center_x = (width - center_room_width) // 2
        center_y = (height - center_room_height) // 2
        
        # Salle centrale avec ouvertures sur tous les c√¥t√©s
        walls.extend(self._create_room_walls(center_x, center_y, center_room_width, center_room_height,
                                            25, 80, ["top", "bottom", "left", "right"]))
        
        # Couloirs de connexion pour s'assurer de l'accessibilit√©
        corridor_width = 60
        corridor_thickness = 15
        
        # Couloir horizontal passant par le centre
        walls.append(Wall(border_thickness, center_y + center_room_height//2 - corridor_width//2,
                        center_x - border_thickness, corridor_thickness))
        walls.append(Wall(center_x + center_room_width, center_y + center_room_height//2 - corridor_width//2,
                        width - (center_x + center_room_width) - border_thickness, corridor_thickness))
        
        walls.append(Wall(border_thickness, center_y + center_room_height//2 + corridor_width//2,
                        center_x - border_thickness, corridor_thickness))
        walls.append(Wall(center_x + center_room_width, center_y + center_room_height//2 + corridor_width//2,
                        width - (center_x + center_room_width) - border_thickness, corridor_thickness))
        
        # Chapelles lat√©rales connect√©es
        chapel_width = 100
        chapel_height = 80
        
        # Chapelle gauche - Connexion vers couloir central
        chapel_x = border_thickness + 60
        chapel_y = center_y + (center_room_height - chapel_height) // 2
        walls.extend(self._create_room_walls(chapel_x, chapel_y, chapel_width, chapel_height, 20, 
                                            50, ["right"]))
        
        # Chapelle droite - Connexion vers couloir central
        chapel_x = width - border_thickness - 60 - chapel_width
        walls.extend(self._create_room_walls(chapel_x, chapel_y, chapel_width, chapel_height, 20,
                                            50, ["left"]))
        
        # Quelques colonnes d√©coratives (PAS dans les passages)
        column_size = 20
        safe_positions = [
            (center_x + 50, center_y + 50),
            (center_x + center_room_width - 70, center_y + 50),
            (center_x + 50, center_y + center_room_height - 70),
            (center_x + center_room_width - 70, center_y + center_room_height - 70)
        ]
        
        for col_x, col_y in safe_positions:
            walls.append(Wall(col_x, col_y, column_size, column_size))
        
        return walls
 
    def _generate_forge_layout(self, width: int, height: int) -> List:
        """G√©n√®re un layout industriel avec machines et convoyeurs"""
        from wall import Wall
        walls = []
        
        # Bordures industrielles
        border_thickness = 45
        walls.extend(self._create_borders(width, height, border_thickness))
        
        # Zones de production (rectangles irr√©guliers)
        production_zones = [
            (border_thickness + 100, border_thickness + 80, 200, 150),
            (width - border_thickness - 300, border_thickness + 80, 200, 150),
            (border_thickness + 80, height - border_thickness - 200, 250, 120),
            (width - border_thickness - 330, height - border_thickness - 200, 250, 120)
        ]
        
        for zone_x, zone_y, zone_w, zone_h in production_zones:
            # Contour de la zone
            walls.extend(self._create_room_walls(zone_x, zone_y, zone_w, zone_h, 15))
            
            # Machines √† l'int√©rieur
            machine_count = random.randint(2, 4)
            for _ in range(machine_count):
                machine_x = zone_x + random.randint(30, zone_w - 60)
                machine_y = zone_y + random.randint(30, zone_h - 60)
                machine_size = random.randint(20, 40)
                walls.append(Wall(machine_x, machine_y, machine_size, machine_size))
        
        # Convoyeurs (lignes de obstacles)
        conveyor_width = 40
        
        # Convoyeur horizontal central
        conv_y = height // 2 - conveyor_width // 2
        for i in range(5, 15):
            obstacle_x = border_thickness + i * 80
            if obstacle_x < width - border_thickness - 50:
                walls.append(Wall(obstacle_x, conv_y, 30, 15))
                walls.append(Wall(obstacle_x, conv_y + conveyor_width - 15, 30, 15))
        
        # Convoyeur vertical
        conv_x = width // 2 - conveyor_width // 2
        for i in range(3, 12):
            obstacle_y = border_thickness + i * 60
            if obstacle_y < height - border_thickness - 50:
                walls.append(Wall(conv_x, obstacle_y, 15, 25))
                walls.append(Wall(conv_x + conveyor_width - 15, obstacle_y, 15, 25))
        
        # Obstacles industriels al√©atoires
        for _ in range(12):
            if random.random() < 0.8:
                obs_x = random.randint(border_thickness + 50, width - border_thickness - 100)
                obs_y = random.randint(border_thickness + 50, height - border_thickness - 100)
                
                # Formes vari√©es d'obstacles
                if random.random() < 0.5:
                    # Obstacle carr√©
                    size = random.randint(25, 50)
                    walls.append(Wall(obs_x, obs_y, size, size))
                else:
                    # Obstacle rectangulaire
                    w = random.randint(30, 80)
                    h = random.randint(20, 40)
                    walls.append(Wall(obs_x, obs_y, w, h))
        
        return walls
    
    def _generate_chaos_layout(self, width: int, height: int) -> List:
        """G√©n√®re un layout chaotique avec g√©om√©trie impossible"""
        from wall import Wall
        walls = []
        
        # Bordures corrompues (irr√©guli√®res)
        border_thickness = random.randint(35, 55)
        walls.extend(self._create_borders(width, height, border_thickness))
        
        # Centre : zone de corruption majeure
        center_x, center_y = width // 2, height // 2
        corruption_radius = 100
        
        # Cercle corrompu central (approxim√© par des rectangles)
        circle_segments = 16
        for i in range(circle_segments):
            angle = (i / circle_segments) * 2 * math.pi
            segment_x = center_x + math.cos(angle) * corruption_radius - 15
            segment_y = center_y + math.sin(angle) * corruption_radius - 15
            walls.append(Wall(int(segment_x), int(segment_y), 30, 30))
        
        # Formes g√©om√©triques impossibles
        # Spirale chaotique
        spiral_segments = 20
        for i in range(spiral_segments):
            t = i / spiral_segments
            spiral_radius = 50 + t * 100
            angle = t * 6 * math.pi  # 3 tours complets
            
            spiral_x = center_x + math.cos(angle) * spiral_radius
            spiral_y = center_y + math.sin(angle) * spiral_radius
            
            # V√©rifier les limites
            if (border_thickness + 40 < spiral_x < width - border_thickness - 40 and
                border_thickness + 40 < spiral_y < height - border_thickness - 40):
                walls.append(Wall(int(spiral_x - 20), int(spiral_y - 20), 40, 40))
        
        # Portails chaotiques (zones vides entour√©es de murs)
        portal_count = random.randint(3, 6)
        for _ in range(portal_count):
            portal_x = random.randint(border_thickness + 100, width - border_thickness - 200)
            portal_y = random.randint(border_thickness + 100, height - border_thickness - 200)
            portal_size = random.randint(60, 100)
            
            # Contour du portail
            walls.extend(self._create_room_walls(portal_x, portal_y, 
                                               portal_size, portal_size, 20))
        
        # Fragments chaotiques al√©atoires
        for _ in range(25):
            if random.random() < 0.7:
                frag_x = random.randint(border_thickness + 30, width - border_thickness - 80)
                frag_y = random.randint(border_thickness + 30, height - border_thickness - 80)
                
                # Formes chaotiques vari√©es
                chaos_type = random.randint(1, 4)
                if chaos_type == 1:
                    # Triangle approxim√©
                    walls.append(Wall(frag_x, frag_y, 30, 15))
                    walls.append(Wall(frag_x + 10, frag_y + 15, 10, 20))
                elif chaos_type == 2:
                    # Croix chaotique
                    walls.append(Wall(frag_x, frag_y + 10, 40, 15))
                    walls.append(Wall(frag_x + 12, frag_y, 15, 40))
                elif chaos_type == 3:
                    # Forme en L
                    walls.append(Wall(frag_x, frag_y, 50, 20))
                    walls.append(Wall(frag_x, frag_y, 20, 50))
                else:
                    # Rectangle d√©form√©
                    w = random.randint(25, 60)
                    h = random.randint(15, 45)
                    walls.append(Wall(frag_x, frag_y, w, h))
        
        return walls
    
    def _generate_death_world_layout(self, width: int, height: int) -> List:
        """G√©n√®re un layout de monde de la mort avec pi√®ges naturels"""
        from wall import Wall
        walls = []
        
        # Bordures naturelles irr√©guli√®res
        border_thickness = random.randint(40, 60)
        walls.extend(self._create_borders(width, height, border_thickness))
        
        # Crevasses et ravins (lignes d'obstacles)
        ravine_count = random.randint(2, 4)
        for _ in range(ravine_count):
            if random.random() < 0.5:
                # Ravin horizontal
                ravine_y = random.randint(border_thickness + 100, height - border_thickness - 200)
                ravine_length = random.randint(300, 600)
                ravine_x = random.randint(border_thickness + 50, width - ravine_length - 50)
                
                # Bords du ravin
                for i in range(0, ravine_length, 40):
                    walls.append(Wall(ravine_x + i, ravine_y, 35, 15))
                    walls.append(Wall(ravine_x + i, ravine_y + 60, 35, 15))
            else:
                # Ravin vertical
                ravine_x = random.randint(border_thickness + 100, width - border_thickness - 200)
                ravine_length = random.randint(250, 500)
                ravine_y = random.randint(border_thickness + 50, height - ravine_length - 50)
                
                for i in range(0, ravine_length, 35):
                    walls.append(Wall(ravine_x, ravine_y + i, 15, 30))
                    walls.append(Wall(ravine_x + 60, ravine_y + i, 15, 30))
        
        # Formations rocheuses naturelles
        rock_formation_count = random.randint(4, 8)
        for _ in range(rock_formation_count):
            form_center_x = random.randint(border_thickness + 80, width - border_thickness - 160)
            form_center_y = random.randint(border_thickness + 80, height - border_thickness - 160)
            formation_size = random.randint(60, 120)
            
            # Cr√©ation d'une formation organique
            rock_count = random.randint(5, 12)
            for i in range(rock_count):
                angle = (i / rock_count) * 2 * math.pi
                distance = random.randint(20, formation_size // 2)
                
                rock_x = form_center_x + math.cos(angle) * distance
                rock_y = form_center_y + math.sin(angle) * distance
                rock_size = random.randint(25, 50)
                
                walls.append(Wall(int(rock_x), int(rock_y), rock_size, rock_size))
        
        # V√©g√©tation dense (obstacles organiques)
        vegetation_zones = random.randint(2, 5)
        for _ in range(vegetation_zones):
            zone_x = random.randint(border_thickness + 50, width - border_thickness - 200)
            zone_y = random.randint(border_thickness + 50, height - border_thickness - 200)
            zone_size = random.randint(80, 150)
            
            # Plantes dans la zone
            plant_count = random.randint(8, 15)
            for _ in range(plant_count):
                plant_x = zone_x + random.randint(0, zone_size)
                plant_y = zone_y + random.randint(0, zone_size)
                plant_size = random.randint(15, 35)
                
                # V√©rifier qu'on ne sort pas du monde
                if (plant_x + plant_size < width - border_thickness and
                    plant_y + plant_size < height - border_thickness):
                    walls.append(Wall(plant_x, plant_y, plant_size, plant_size))
        
        # Pi√®ges dispers√©s (petits obstacles)
        trap_count = random.randint(15, 25)
        for _ in range(trap_count):
            trap_x = random.randint(border_thickness + 30, width - border_thickness - 50)
            trap_y = random.randint(border_thickness + 30, height - border_thickness - 50)
            trap_size = random.randint(10, 25)
            walls.append(Wall(trap_x, trap_y, trap_size, trap_size))
        
        return walls
    
    def _generate_basic_layout(self, width: int, height: int) -> List:
        """‚úÖ VERSION CORRIG√âE - Layout de base enti√®rement accessible"""
        from wall import Wall
        walls = []
        walls.extend(self._create_borders(width, height, 30))
        
        # Cr√©er un couloir central pour garantir l'acc√®s √† tout
        corridor_width = 100
        center_x = width // 2
        center_y = height // 2
        
        # Couloir horizontal central
        walls.append(Wall(30, center_y - corridor_width//2, width - 60, 15))
        walls.append(Wall(30, center_y + corridor_width//2, width - 60, 15))
        
        # Quelques obstacles simples mais PAS dans le couloir
        for _ in range(6):
            for attempt in range(10):
                x = random.randint(100, width - 200)
                y = random.randint(100, height - 200)
                size = random.randint(30, 60)
                
                # V√©rifier qu'on ne bloque pas le couloir central
                obstacle_rect = pygame.Rect(x, y, size, size)
                corridor_rect = pygame.Rect(30, center_y - corridor_width//2, width - 60, corridor_width)
                
                if not obstacle_rect.colliderect(corridor_rect):
                    walls.append(Wall(x, y, size, size))
                    break
        
        return walls
    def _create_borders(self, width: int, height: int, thickness: int) -> List:
        """Cr√©e les murs de bordure"""
        from wall import Wall
        return [
            Wall(0, 0, width, thickness),                    # Haut
            Wall(0, height - thickness, width, thickness),   # Bas
            Wall(0, 0, thickness, height),                   # Gauche
            Wall(width - thickness, 0, thickness, height)    # Droite
        ]
    
    def _create_room_walls(self, x: int, y: int, width: int, height: int, 
                        wall_thickness: int, opening_size: int = 60, 
                        openings: list = None) -> List:
        """
        ‚úÖ NOUVELLE VERSION - Cr√©e les murs d'une salle avec PLUSIEURS ouvertures
        openings: liste des c√¥t√©s avec ouvertures ["top", "bottom", "left", "right"]
        """
        from wall import Wall
        walls = []
        
        # Si aucune ouverture sp√©cifi√©e, en cr√©er au moins 2 pour connectivit√©
        if openings is None:
            openings = ["top", "bottom"]  # Par d√©faut: connexions haut et bas
        
        # Mur du haut
        if "top" in openings:
            # Avec ouverture
            left_width = (width - opening_size) // 2
            right_width = width - opening_size - left_width
            if left_width > 0:
                walls.append(Wall(x, y, left_width, wall_thickness))
            if right_width > 0:
                walls.append(Wall(x + left_width + opening_size, y, right_width, wall_thickness))
        else:
            # Mur complet
            walls.append(Wall(x, y, width, wall_thickness))
        
        # Mur du bas
        if "bottom" in openings:
            # Avec ouverture
            left_width = (width - opening_size) // 2
            right_width = width - opening_size - left_width
            if left_width > 0:
                walls.append(Wall(x, y + height - wall_thickness, left_width, wall_thickness))
            if right_width > 0:
                walls.append(Wall(x + left_width + opening_size, y + height - wall_thickness, 
                                right_width, wall_thickness))
        else:
            # Mur complet
            walls.append(Wall(x, y + height - wall_thickness, width, wall_thickness))
        
        # Mur de gauche
        if "left" in openings:
            # Avec ouverture
            top_height = (height - opening_size) // 2
            bottom_height = height - opening_size - top_height
            if top_height > 0:
                walls.append(Wall(x, y, wall_thickness, top_height))
            if bottom_height > 0:
                walls.append(Wall(x, y + top_height + opening_size, wall_thickness, bottom_height))
        else:
            # Mur complet
            walls.append(Wall(x, y, wall_thickness, height))
        
        # Mur de droite
        if "right" in openings:
            # Avec ouverture
            top_height = (height - opening_size) // 2
            bottom_height = height - opening_size - top_height
            if top_height > 0:
                walls.append(Wall(x + width - wall_thickness, y, wall_thickness, top_height))
            if bottom_height > 0:
                walls.append(Wall(x + width - wall_thickness, y + top_height + opening_size, 
                                wall_thickness, bottom_height))
        else:
            # Mur complet
            walls.append(Wall(x + width - wall_thickness, y, wall_thickness, height))
        
        return walls
 
    def get_environment_info(self) -> dict:
        """Retourne les informations sur l'environnement actuel"""
        if self.current_config is None:
            return {"name": "Aucun", "description": "Pas d'environnement charg√©"}
        
        return {
            "name": self.current_config.name,
            "description": self.current_config.description,
            "type": self.current_environment.value,
            "movement_modifier": self.current_config.movement_modifier,
            "has_ambient_effects": self.current_config.has_ambient_effects,
            "has_interactive_elements": self.current_config.has_interactive_elements
        }
    
    def get_wall_color(self) -> Tuple[int, int, int]:
        """Retourne la couleur des murs pour l'environnement actuel"""
        if self.current_config:
            return self.current_config.wall_color
        return (128, 128, 128)  # Gris par d√©faut
    
    def get_floor_color(self) -> Tuple[int, int, int]:
        """Retourne la couleur du sol pour l'environnement actuel"""
        if self.current_config:
            return self.current_config.floor_color
        return (64, 64, 64)  # Gris fonc√© par d√©faut
    
    def get_movement_modifier(self) -> float:
        """Retourne le modificateur de mouvement pour l'environnement"""
        if self.current_config:
            return self.current_config.movement_modifier
        return 1.0
    
    def should_spawn_special_effects(self) -> bool:
        """D√©termine si des effets sp√©ciaux ambiants doivent appara√Ætre"""
        if self.current_config:
            return (self.current_config.has_ambient_effects and 
                    random.random() < 0.1)  # 10% de chance par frame
        return False